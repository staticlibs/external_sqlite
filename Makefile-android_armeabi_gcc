
export CC := ${CMAKE_C_COMPILER}
export AR := ${CMAKE_AR}
export AS := ${CMAKE_AS}
export LD := ${CMAKE_LD}
export NM := ${CMAKE_NM}
export OBJCOPY := ${CMAKE_OBJCOPY}
export OBJDUMP := ${CMAKE_OBJDUMP}
export RANLIB := ${CMAKE_RANLIB}
export STRIP := ${CMAKE_STRIP}
export CFLAGS := ${${PROJECT_NAME}_CFLAGS}

all:
ifeq ($(wildcard ${CMAKE_CURRENT_BINARY_DIR}/sqlite),)
	echo ${CMAKE_CURRENT_BINARY_DIR}
	cp -a ${CMAKE_CURRENT_LIST_DIR}/sqlite ${CMAKE_CURRENT_BINARY_DIR}/sqlite
	cp -a ${CMAKE_CURRENT_LIST_DIR}/manifests/* ${CMAKE_CURRENT_BINARY_DIR}/sqlite
	cd ${CMAKE_CURRENT_BINARY_DIR}/sqlite && $(SH) ./configure \
	    --host=${CMAKE_HOST} \
	    --disable-shared \
	    --enable-static \
	    --disable-load-extension \
	    --disable-readline \
	    --disable-tcl \
	    ${${PROJECT_NAME}_DEBUG}
	cd ${CMAKE_CURRENT_BINARY_DIR}/sqlite && $(MAKE)
	mkdir -p ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}
	cp ${CMAKE_CURRENT_BINARY_DIR}/sqlite/.libs/libsqlite3.a ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/libsqlite3.a
else
	@echo "[${CMAKE_CURRENT_BINARY_DIR}/sqlite] directory found, skipping build"
endif	
