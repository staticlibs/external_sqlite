# Copyright 2015, alex at staticlibs.net
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cmake_minimum_required ( VERSION 2.8.12 )

project ( external_sqlite C CXX )
set ( ${PROJECT_NAME}_STATICLIB_VERSION 3.8.8.2.4 )
set ( ${PROJECT_NAME}_DESCRIPTION "SQLite library build for Staticlibs" )
set ( ${PROJECT_NAME}_URL https://github.com/staticlibs/external_sqlite.git )

# copy files
file ( COPY ${CMAKE_CURRENT_LIST_DIR}/sqlite
        DESTINATION ${CMAKE_CURRENT_BINARY_DIR} )
# copy manifests
file ( COPY ${CMAKE_CURRENT_LIST_DIR}/resources/manifests/manifest 
        DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/sqlite )
file ( COPY ${CMAKE_CURRENT_LIST_DIR}/resources/manifests/manifest.uuid 
        DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/sqlite )

if ( STATICLIB_TOOLCHAIN MATCHES "windows_[^_]+_[^_]+" )
    file ( COPY ${CMAKE_CURRENT_LIST_DIR}/resources/windows/Makefile.msc
            DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/sqlite )
endif ( )

# variables for makefiles
if ( CMAKE_BUILD_TYPE MATCHES "Debug" )
    set ( ${PROJECT_NAME}_CFLAGS "${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_DEBUG}" )
    set ( ${PROJECT_NAME}_DEBUG "--enable-debug" )
    set ( ${PROJECT_NAME}_DEBUG_WINDOWS "2" )
endif ( )
if ( CMAKE_BUILD_TYPE MATCHES "Release" )
    set ( ${PROJECT_NAME}_CFLAGS "${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_RELEASE}" )
    set ( ${PROJECT_NAME}_DEBUG "--disable-debug" )
    set ( ${PROJECT_NAME}_DEBUG_WINDOWS "0" )
endif ( )
if ( NOT DEFINED ${PROJECT_NAME}_DEBUG_WINDOWS )
    set ( ${PROJECT_NAME}_DEBUG_WINDOWS "0" )
endif ( )

# library config
if ( NOT DEFINED CMAKE_LIBRARY_OUTPUT_DIRECTORY )
    set ( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} )
endif ( )
# copy makefile
configure_file ( ${CMAKE_CURRENT_LIST_DIR}/resources/Makefile-${STATICLIB_TOOLCHAIN}
        ${CMAKE_CURRENT_BINARY_DIR}/Makefile-${STATICLIB_TOOLCHAIN})
if ( STATICLIB_TOOLCHAIN MATCHES "windows_[^_]+_[^_]+" )
    set ( ${PROJECT_NAME}_MAKE_PROGRAM nmake )
else ( )
    set ( ${PROJECT_NAME}_MAKE_PROGRAM ${CMAKE_MAKE_PROGRAM} )
endif ( )

# run configure
execute_process ( COMMAND ${${PROJECT_NAME}_MAKE_PROGRAM}
        -f ${CMAKE_CURRENT_BINARY_DIR}/Makefile-${STATICLIB_TOOLCHAIN} configure
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} )
# add build target
add_custom_target( ${PROJECT_NAME} ALL COMMAND ${${PROJECT_NAME}_MAKE_PROGRAM} 
        -f ${CMAKE_CURRENT_BINARY_DIR}/Makefile-${STATICLIB_TOOLCHAIN} build
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} )
add_library( sqlite3 STATIC IMPORTED GLOBAL )
set_target_properties( sqlite3 PROPERTIES IMPORTED_LOCATION 
        ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/libsqlite3${CMAKE_STATIC_LIBRARY_SUFFIX} )
add_dependencies( sqlite3 ${PROJECT_NAME} )

# pkg-config
set ( ${PROJECT_NAME}_MODULE sqlite )
set ( ${PROJECT_NAME}_PC_CFLAGS "-I${CMAKE_CURRENT_BINARY_DIR}/sqlite" )
set ( ${PROJECT_NAME}_PC_LIBS "-L${CMAKE_LIBRARY_OUTPUT_DIRECTORY} -lsqlite3" )
if ( CMAKE_SYSTEM_NAME MATCHES "Linux" )
    set ( ${PROJECT_NAME}_PC_LIBS "${${PROJECT_NAME}_PC_LIBS} -lpthread" )
endif ( )
configure_file ( ${CMAKE_CURRENT_LIST_DIR}/resources/pkg-config.in 
        ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/pkgconfig/sqlite3.pc )
